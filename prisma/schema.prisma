generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts      Account[]
  sessions      Session[]
  createdTasks  Task[]         @relation("CreatorTasks")
  assignedTasks Task[]         @relation("AssignedTasks")
  projects      Project[]      @relation("ProjectMembers")
  notifications Notification[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  Project   Project[]
  Comment   Comment[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  tasks   Task[]
  members User[] @relation("ProjectMembers")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  priority    Priority
  status      TaskStatus
  deadline    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt @default(now())

  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  createdBy   User   @relation(name: "CreatorTasks", fields: [createdById], references: [id])
  createdById String

  assignedTo   User?   @relation(name: "AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?

  tags     TaskTag[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  color String // Hex color or predefined values for tag color
  tasks TaskTag[]
}

model TaskTag {
  taskId String
  tagId  String

  task Task @relation(fields: [taskId], references: [id])
  tag  Tag  @relation(fields: [tagId], references: [id])

  @@id([taskId, tagId])
}

model Notification {
  id        String   @id @default(cuid())
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
